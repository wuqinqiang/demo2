// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/demo2.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Demo2_Ping_FullMethodName     = "/proto.Demo2/Ping"
	Demo2_GetEmpty_FullMethodName = "/proto.Demo2/GetEmpty"
)

// Demo2Client is the client API for Demo2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Demo2Client interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetEmpty(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type demo2Client struct {
	cc grpc.ClientConnInterface
}

func NewDemo2Client(cc grpc.ClientConnInterface) Demo2Client {
	return &demo2Client{cc}
}

func (c *demo2Client) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Demo2_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demo2Client) GetEmpty(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Demo2_GetEmpty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Demo2Server is the server API for Demo2 service.
// All implementations should embed UnimplementedDemo2Server
// for forward compatibility
type Demo2Server interface {
	Ping(context.Context, *Request) (*Response, error)
	GetEmpty(context.Context, *EmptyReq) (*EmptyResp, error)
}

// UnimplementedDemo2Server should be embedded to have forward compatible implementations.
type UnimplementedDemo2Server struct {
}

func (UnimplementedDemo2Server) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDemo2Server) GetEmpty(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmpty not implemented")
}

// UnsafeDemo2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Demo2Server will
// result in compilation errors.
type UnsafeDemo2Server interface {
	mustEmbedUnimplementedDemo2Server()
}

func RegisterDemo2Server(s grpc.ServiceRegistrar, srv Demo2Server) {
	s.RegisterService(&Demo2_ServiceDesc, srv)
}

func _Demo2_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Demo2Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo2_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Demo2Server).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo2_GetEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Demo2Server).GetEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo2_GetEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Demo2Server).GetEmpty(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Demo2_ServiceDesc is the grpc.ServiceDesc for Demo2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Demo2",
	HandlerType: (*Demo2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Demo2_Ping_Handler,
		},
		{
			MethodName: "GetEmpty",
			Handler:    _Demo2_GetEmpty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/demo2.proto",
}
